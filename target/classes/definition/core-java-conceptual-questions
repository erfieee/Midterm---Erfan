Please answer the below core-java Questions:

What is programing language?

A programming language is a formal language used to communicate instructions to a computer.
They are used to create software, websites, mobile apps and other digital apps. They allow
programmers to write algorithms and procedures that tell the computer what to do, how to do it,
and in what order.


What jdk contains or composed of and define each components?

Java Development Kit contains several components: used to develop Java applications

Java Compiler - program that translates Java source code into bytecode to run on JVM.

Java Virtual Machine JVM - program that interprets bytecode and executes Java programs.
Also responsible for managing memory, providing security, and handling exceptions.

Java Class Libraries - Pre-written Java code that is used to perform common tasks such as
input/output operations, networking, and database access.

Java Runtime Environment JRE - subset of JDK that includes the JVM and class libraries.
Used to run Java applications but not to develop them.

JavaDoc - tool that generates documentation from Java source code. It creates HTML pages
that describes the classes, methods, and variables used in the code.

Java Debugger - tool that helps programmers find and fix bugs in their code. It allows
them to step through code, set breakpoints, and examine variables.

JavaFX - set of graphics and media APIs from creating rich, interactive applications that can
run on desktops, browsers, and mobile devices.


What is IDE?

Integrated Development Environment - Software application that provide comprehensive facilities
for software development, all within a single environment. typically includes a code editor,
a compiler or interpreter, a debugger, and other tools that are commonly used in software development.


What are the IDEs available in the market to support java?

Eclipse, IntelliJ IDEA, NetBeans, Visual Studio Code, BlueJ

Explain the entire java life cycle.

The lifecycle is divided into several phases:

Requirements Gathering - the requirements for the application is gathered from stakeholders.
Involves discussions and interviews with the stakeholders to determine what the application
should do, its functionality, and features.

Design - the design of the application is created including the architecture, structure, and
components. Involves creating class diagrams, sequence diagrams, and other technical specifications
that will guide the development process.

Development - writing the code for the application, following the design specifications. Involves
programming, testing, and debugging to create a working application.

Testing - Once development is complete, the application is tested to ensure that it meets the
requirements and functions correctly. Done at different levels, including unit testing, integration
testing, system testing.

Deployment - application is deployed to a production environment. Involves setting up the required
infrastructure, such as servers and databases, and configuring the application to work in the
production environment.

Maintenance - After deployment, monitoring the application to ensure that it is working correctly
and making changes as required. Includes bug fixes, updates, and enhancements to the application.

The lifecycle helps to ensure that the application is developed correctly, meets the requirements and is
maintained over its lifetime.


what is class?
A class is a blueprint/ template that defines the characteristics and behaviors of an object.
It defines a set of properties and methods that the objects created from it will possess.

What is object?
An object is an instance of a class. It is a runtime entity that has its own state and behavior.
Objects are created from classes using the 'new' keyword and are stored in memory.

What is the entry point of an application?
The entry point of an application is the main method. It is a special method that serves as the
starting point of the program when it is executed.

Why main is static?
It's static because it needs to be called by the Java Virtual Machine before any objects of the
class are created.

Which class is the superclass of all classes?
The 'Object' class is the superclass of all classes. Every class in Java directly or indirectly
extends the 'Object' class, which provides a set of methods that can be overridden or used in any
class.

What is difference between path and classpath variables?

The PATH environment variable is used by the operating system to locate executable programs when
they are run from the command line. It contains a list of directories where executable files are
stored.

The CLASSPATH environment variable is used by the Java Virtual Machine to locate Java class files
when they are compiled or run. It contains a list of directories or JAR files where class files are
stored.

What is the difference between an Interface and Abstract class?

Both are used to define abstract behavior that are implemented by concrete classes.

An Interface can only define abstract methods which have no implementation while an abstract class
can define both abstract and concrete methods some of which have an implementation.
A class can implement multiple interfaces but it can only extend a single abstract class.
All methods in an interface are implicitly public while methods in an abstract class can have any
access modifiers.
An abstract class can have a constructor while an interface cannot.
An abstract class can have instance variables which can hold state information while interface cannot.
An interface can define default methods which provide default implementation for a method that can be
overridden by a implementing class. An abstract class cannot define default methods.

interfaces are used to define a set of behaviors that a class must implement, while abstract classes
are used to define a base implementation that can be shared by multiple subclasses.

Use interface if you want to define a contract for a set of related classes that must implement a
certain behavior. Use abstract class if you want to share some implementation details among related
classes.

Can you make an Object from an Interface and Abstract class ? if not how do you use it ?
You cannot create an object directly from an interface or an abstract class, as they are both
incomplete and contain one or more abstract method that do not have implementation. Instead,
you need to create a concrete class that implements the interface or extends the abstract class
and provide implementations for the abstract methods defined in them.

what is Access Specifier?

Access Specifier is a key word used to determine the level of access or visibility that a class,
method or variable has from other parts of the program.
Public - can be accessed from any part of the program, regardless of which package.
Protected - can be accessed from within the same package or within the a subclass in a different
package.
Default - no access specifier. can be accessed within the same package.
Private - can be accessed only from within the same class.
Access specifiers are used to control the level of encapsulation of a class or its members.
Encapsulation is the idea of hiding the implementation details of a class or its members.

What is OOP ? Define each feature of java OOP.
Object Oriented Programming, programming paradigm based on the concept of 'objects', which
contains data and code to manipulate data.
Encapsulation - the practice of hiding the internal implementation details of an object from
the outside world and providing a well defined interface for interacting with it.
Inheritance - the process of creating a new class by extending an existing class, subclass
inherits all the data and methods of the existing class known as superclass. Uses the
'extends' keywords.
Polymorphism - the ability of an object to take on many forms. Two mechanisms.
Method Overloading is the practice of defining two or more methods with the same name but different
parameters in the same class.
Method Overriding is the practice of defining a method in a subclass that has the same name,
return type, and parameters as a method in the superclass.
Abstraction - the practice of representing complex real world objects in a simplified way.
achieved through the use of abstract classes and interfaces. Abstract class is a class that
cannot be instantiated and can contain abstract methods. An interface is a collection of
abstract methods and constant values. Classes can implement interfaces to define their behavior.

What is Java Package and which package is imported by default?
A mechanism for organizing related classes, interfaces, enumeration and annotation types.
Packages provide a way to group related classes together and also help prevent naming conflicts

What is API? Name list of API that you have used so far.
Application Programming Interface, which is a set of rules, protocols, and tools, for building
software applications. API provides a way for different software components to communicate
with each other and share information.
JAVA, Google Maps, Facebook, Youtube, etc.

Does java support multiple inheritance, explain why or why not?
Java does not support multiple inheritance of classes but it does support multiple inheritance
of interfaces. Javas decision to exclude multiple inheritance of classes was a design choice
made to avoid some of the problems that arise with multiple inheritance such as the diamond
problem where two superclasses of a subclass have a common method with the same signature.
The subclass does not know which superclass method to call, leading to ambiguity and potential
unexpected behavior.

What is method overloading and when it happens?
Method overloading is a feature in Java that allows a class to have multiple methods with the
same name but different parameter types, numbers or orders. The compiler decides which method
call based on the parameters and order of arguments passed.

Explain exceptions in java and how to handle it.
Exceptions in Java are events that occur during the execution of a program that disrupts
the normal flow of instructions. They are objects that represent an error or an abnormal
condition that has occurred during the execution of the program.
Exceptions can be handled using the try-catch-finally block in Java. The try block contains
the code that may throw an exception and the catch block contains the code to handle the
exception. The finally block contains the code that will be executed whether or not an
exception occurs.


What is static keyword in java? How it has been used in variables and methods ?
Static keyword is used to create variables and methods that belong to a class rather than to
an instance of that class. When a variable or method is declared as static, it can be accessed
directly through the class without the need to create an object of that class.

What is final and how it has been used variables and methods?
The final keyword is used to define entities that cannot be modified after they are
initialized.

What is final, finally and finalize?
final is a keyword that is used to declare a constant or an entity whose value cannot be
changed after initialization. A final variable is a constant and cannot be reassigned a new
value once initialized. A final method cannot be overridden by a subclass and a final class
cannot be subclassed.
finally is a block of code that is executed after a try/catch block, regardless of where
an exception is thrown or not. finally block is used to perform cleanup actions such as closing
database connections or releasing resources that need to be executed even if an exception occurs.
finalize is a method that is called by the garbage collector before an object is destroyed.
used to perform cleanup actions for an object before it is removed from memory. finalize
method isn't called immediately when an object becomes eligible for garbage collection but
rather is added to a queue of finalizable objects that are processed by a low priority thread.

What is a constructor ?
A constructor is a special method that is used to initialize objects of a class. Purpose of it
is to ensure that an object is properly initialized before it is used. They have the same name
as the class, and are declared without a return type.

Can we have multiple constructors in a class?
Yes it is possible to have multiple contructor in a class called constructor overloading.
Allows us to create objects with different sets of initial values.

If we don't have a constructor declared, what is called during the object creation?
The Java compiler provides a default constructor for the class. Default is no argument
constructor that initializes all instance variables to their default values, which is
null for object references, ) for numeric data types and false for boolean date type.

What is "this" keyword in java ?
refers to the current object, i.e., the object whose method or constructor is being invoked.

What is "super" keyword in java? How many possible way can you use?
The super keyword is used to refer to the parent class. Call a parent constructor, call a
parent class method, access a parent class variable.

What is JVM stand for ?
Java Virtual Machine is an abstract machine that provides a runtime environment for Java
programs to execute in. It'e responsible for interpreting Java bytecode, optimizing the code
for execution, and providing various services such as memory management and garbage collection.

Is JVM platform independent?
Yes it is designed to be platform independent meaning Java programs can run on any platform or
operating system as long as JVM is installed. This is possible because JAva code is compiled
into platform independent bytecode, which can then be executed to any platform that has a JVM
implementation.

What version of java are you using?
What is JAR stand for ?
Java Archive - JAR file is a package file format typically used to aggregate many Java class
files and associated metadata and resources ((text, images) into one file for distribution.

What is the difference between JDK and JVM?
JDK is a software development kit that provides the tools necessary to develop, compile,
and debug Java applications.
JVM is a runtime environment that executes Java bytecode. It interprets the bytecode and
provides the necessary services to run the Java program such as memory management and
garbage collection.
JDK is used for developing and compiling Java applications while JVM is used to execute Java
bytecode.

What is the difference between JVM and JRE?
JRE is a runtime environment that provides the minimum requirements for running a Java
application. includes JVM, class libraries, and other necessary files to run Java programs,
but it does not include the tools needed for developing or compiling Java programs.
JVM is an abstract machine that provides runtime environment in which Java bytecode can be
executed. It interprets the bytecode and provides services such as memory management,
security and thread synchronization.

What is compile time and run time?
Compile time is the period during which the source code is compiled into an executable form
while run time is the period during which the compiled program is executed by the computer.

What is heap?
In Java it is the region of memory where objects are stored at runtime.

How java manage it's memory?
Java uses an automatic memory management system, known as garbage collection to manage its
memory. JVM manages the memory allocation and deallocation process of Java applications.

What is the difference between String, StringBuffer and StringBuilder?
String is immutable, once String object is created it cannot be modified.
StringBuffer is mutable meaning it can be modified directly. It is also thread-safe so
multiple threads can manipulate the same StringBuffer object without conflict.
StringBuilder - is mutable and can be modified directly. However, it isn't thread safe.

What is Singleton class?
Singleton is a design pattern that restricts the instantiation of a class to a single
instance and provides global point of access to that instance. It ensures that only one
object of a particular class is created in JVM and provides a way to access this object
globally.

What is Serialization and Deserialization?
Serialization is the process of converting an object from its in-memory representation to
a byte stream, so that it can be easily stored on disk or sent over a network.
Deserialization is the reverse process of creating an object from the serialized byte stream.

when to use transient variable in java?
To exclude a variable from serialization, you can use the transient keyword.
When a variable is marked as transient, it will not be serialized when the object is
serialized. When the object is deserialized, the value of the transient variable will be
set to its default value (e.g., null for objects, 0 for primitives).

Difference between while and do..while loop?
In a while loop, the condition is checked first before executing the loop body.
If the condition is false, the loop body is not executed at all. If the condition is true,
the loop body is executed repeatedly until the condition becomes false.
do..while loop: In a do..while loop, the loop body is executed first and then the condition
is checked. If the condition is false, the loop is exited. If the condition is true, the loop
body is executed again.

What is Enum?
An enum is a special type of data type that is used to define a fixed set of constants.
The values of an enum are known as enum constants.

What is Iterator?
An iterator is an object that allows you to traverse through the elements of a collection.
It provides a way to access the elements of a collection one by one, without exposing the
underlying implementation of the collection.

Which one will take more memory, an int or Integer?
An int takes less memory than an Integer.
An int is a primitive data type and occupies 32 bits of memory (4 bytes) in Java,
while an Integer is an object and requires 16 bytes of overhead in addition to the 4 bytes
for the int value.

Why is String Immutable in Java?
Security: String values are widely used in Java to store sensitive information like usernames,
passwords, database URLs, etc. If String objects were mutable, these values could be changed
by an unauthorized user, which could compromise the security of the application.

Thread-safety: Immutable objects like String are thread-safe, which means that they can be
safely accessed by multiple threads at the same time without the risk of inconsistent state.

Performance: Because String objects are immutable, they can be cached and reused by the JVM.
This can improve the performance of applications that use many String objects.

Simplifies Code: The immutability of String makes it easier to reason about and write code
that uses String values, since you don't have to worry about changes to the value affecting
other parts of the program.

What is constructor chaining in Java?
Constructor chaining in Java refers to the process of calling one constructor from another
constructor in the same class or a superclass. This technique allows a class to have multiple
constructors, each with a different set of parameters, while avoiding code duplication.

The difference between Serial and Parallel Garbage Collector?
Garbage collection is an automatic process that manages memory in the background and deallocates
objects that are no longer in use. Its responsible for freeing up memory by reclaiming objects
that are no longer needed by the program.
Serial Garbage Collector uses single thread and pauses all the threads in the application
during garbage collection.
Parallel Garbage Collector uses multiple threads and performs garbage collection concurrently
with the application threads.

What is JIT stands for?
Just In Time, refers to a feature of JVM that dynamically compiles bytecode into machine code
at runtime, just before executing it. JIT compiler analyzes the code and identifies frequently
used portions of the code, and then compiles them into machine code for faster execution. This
process is done on the fly and is transparent to the user.

Explain Java Heap space and Garbage collection?
the heap is a part of memory used for dynamic allocation of objects and is shared by all
threads in a Java Virtual Machine (JVM). It is a region of memory that is created when the
JVM starts and is used to store objects created during the lifetime of the application.
The heap is managed by the garbage collector, which is a process that runs in the background
and automatically frees up memory that is no longer being used by the application.
The garbage collector periodically scans the heap to identify and remove objects that are no
longer being used by the application. It does this by marking objects that are still being
referenced by the application and then freeing up the memory used by objects that are no
longer being referenced.

Can you guarantee the garbage collection process?
As a programmer, you cannot guarantee the garbage collection process in Java.
It is the responsibility of the JVM to perform garbage collection, and the JVM decides
when to run the garbage collector based on certain algorithms and memory usage patterns.

What is the difference between stack and heap in Java?
the stack is used for local variables and method calls while the heap is used for object
allocation. When a Java application creates an object, the memory is allocated on the heap.

What is reflection in java and why is it useful?
Reflection in Java is a mechanism that allows a program to inspect and modify its own
structure, behavior, and state at runtime. It enables the program to analyze and manipulate
classes, methods, fields, and other elements of a program's structure dynamically.

what is multithreading in java?
refers to the concurrent execution of two or more parts of a program to maximize CPU
utilization. In other words, it is a technique of dividing a single process into multiple
smaller processes or threads that can run concurrently. This allows different parts of a
program to execute concurrently, which can improve the overall performance of the program.

What is the use of synchronization in Java?
synchronization is used to control the access of multiple threads to shared resources,
such as variables or methods, to avoid race conditions and inconsistent data. Synchronization
ensures that only one thread at a time can access the synchronized code, while other threads
are blocked and wait for the synchronized block or method to be released.

What is Framework?
a framework is a pre-built software platform that provides developers with a set of common
tools, libraries, and conventions for building applications. A framework generally includes
a set of programming guidelines, code libraries, and helper classes that simplify the
development process by providing a pre-built foundation for building applications.Some
popular examples of frameworks in the Java ecosystem include Spring, Hibernate, and Struts.

What are the testing Framework available in java?
JUnit: JUnit is a widely used testing framework for Java applications. It provides annotations
to define test cases, assertions to check the results of the test cases, and test runners to
execute the test cases.

TestNG: TestNG is a testing framework that provides more functionality than JUnit. It supports
parallel testing, grouping of test cases, and data-driven testing.

Mockito: Mockito is a mocking framework that allows developers to create mock objects and stub
methods for testing purposes.

Selenium: Selenium is an automation testing framework used for testing web applications. It
supports multiple programming languages, including Java.

Cucumber: Cucumber is a behavior-driven development (BDD) testing framework that supports
multiple programming languages, including Java. It uses Gherkin syntax to define test cases
in a human-readable format.

Difference between jUnit and testNG?
Annotations: Both frameworks support annotations, but TestNG has more annotations compared to
JUnit. For example, TestNG supports annotations like @BeforeSuite, @AfterSuite, @BeforeTest,
@AfterTest, etc., while JUnit does not.

Test Configuration: In TestNG, you can define test configuration at various levels, including
test suite, test case, and test method, using XML files. This allows for more flexibility in
test configuration. In JUnit, configuration is mainly done through code.

Test Execution: In JUnit, test methods are executed in a random order. In TestNG, you can
control the order of test execution using dependencies, priorities, and groups.

Reporting: TestNG provides more comprehensive and customizable test reports compared to JUnit.

Data-Driven Testing: TestNG has built-in support for data-driven testing using the
@DataProvider annotation. In JUnit, you can achieve the same functionality using external
libraries or custom code.

Parallel Test Execution: TestNG supports parallel test execution, which can significantly
reduce the test execution time. In JUnit, parallel execution is not supported by default.

What are the dependencies for this project?
JUNIT, Mongodb, mysql

what is dependency injection in java?
Dependency Injection (DI) is a design pattern used in object-oriented programming (OOP) to
reduce coupling between components and to make the code more modular and reusable. DI allows
objects to be created and managed by a framework or container, rather than being created by
other objects within the application.

What is static binding and dynamic binding?
Static binding refers to the process of binding a method call to its associated method
implementation at compile-time. It occurs when the type of the object is determined at
compile-time and the method call is bound to the implementation of the method associated
with that type. In static binding, the method call cannot be changed at runtime, even if
the actual type of the object changes. Static binding is also called early binding or
compile-time binding.
On the other hand, dynamic binding refers to the process of binding a method call to its
associated method implementation at runtime. It occurs when the type of the object is
determined at runtime, and the method call is bound to the implementation of the method
associated with that actual type of the object. In dynamic binding, the method call can be
changed at runtime based on the actual type of the object. Dynamic binding is also called
late binding or runtime binding.
Dynamic binding is mostly used in inheritance-based programming, where a subclass can override
a method of its superclass. When a method is overridden, the method call should be dynamically
bound to the implementation in the subclass, not in the superclass. Static binding is mostly
used in method overloading, where multiple methods have the same name, but different
parameters. The correct method is selected at compile-time based on the type of the
arguments passed to it.







